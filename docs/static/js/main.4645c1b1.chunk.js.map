{"version":3,"sources":["components/CategoryAdd.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","onChange","target","value","getGif","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":";mMAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACtB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACC,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKf,SACC,uBACCO,KAAK,OACLC,YAAY,eACZC,SAjBuB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOC,QAiBrBA,MAAOZ,O,+BCxBEa,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC9FH,GAFoB,sBAKHI,MAAMF,GALH,cAKfG,EALe,gBAOEA,EAAIC,OAPN,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAIpCa,QAAQC,IAAIR,GAjBS,kBAoBdA,GApBc,4CAAH,sDCENS,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACpC,OACC,sBAAKgB,UAAU,yCAAf,UACC,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAKA,EAAL,WCFUS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGzB,ECJ2B,SAACA,GAC5B,MAA0Bf,mBAAS,CAClCsB,KAAM,GACNe,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACT1B,EAAOC,GAAU0B,MAAK,SAACC,GACtBH,EAAS,CAAEjB,KAAMoB,EAAML,SAAS,SAE/B,CAACtB,IAEGuB,EDR2BK,CAAa5B,GAAjCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACC,eAAC,WAAD,WACC,qBAAIJ,UAAU,mCAAd,cAAmDlB,EAAnD,OACCsB,GACA,mBAAGJ,UAAU,mCAAb,yBAGA,qBAAKA,UAAU,YAAf,SACC,6BACEL,EAAOJ,KAAI,SAACC,GACZ,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEfvBkB,EAAe,WAE3B,MAAoC5C,mBAAS,IAA7C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAOA,OACC,eAAC,WAAD,WACC,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACE8C,EAAWrB,KAAI,SAACT,GAAD,OACf,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCfvC+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.4645c1b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategoryAdd = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories((cats) => [inputValue, ...cats]);\r\n\t\t\tsetInputValue('');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Category Add\"\r\n\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nCategoryAdd.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CategoryAdd;\r\n","export const getGif = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?api_key=KjKNYJLmCsyzV4QTEaFskQJ1ZfQIT6vP&q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=10`;\r\n\r\n\tconst res = await fetch(url);\r\n\r\n\tconst { data } = await res.json();\r\n\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\r\n\tconsole.log(gifs);\r\n\t//setImages(gifs);\r\n\r\n\treturn gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__fadeIn\">\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t\t<p> {title} </p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\t//! Uso del CUSTON Hook para limpiar del componente la logica\r\n\t//! de solicitudes y otras hierbas\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h3 className=\"animate__animated animate__flash\"> {category} </h3>\r\n\t\t\t{loading && (\r\n\t\t\t\t<p className=\"animate__animated animate__pulse\">Cargando...</p>\r\n\t\t\t)}\r\n\t\t\t{\r\n\t\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t{images.map((img) => {\r\n\t\t\t\t\t\t\treturn <GifGridItem key={img.id} {...img} />;\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ol>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGif } from '../helpers/getGif';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGif(category).then((imgs) => {\r\n\t\t\tsetState({ data: imgs, loading: false });\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport CategoryAdd from './CategoryAdd';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\t//const categories = [\"Samurai X\", \"One Punch\", \"Dragon Ball Z\"];\r\n\tconst [categories, setCategories] = useState([]);\r\n\r\n\t/* const handleAdd = () => {\r\n\r\n        setCategories((cats) => [...cats, category]);\r\n    }; */\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h1>GifExpertApp</h1>\r\n\t\t\t<hr></hr>\r\n\t\t\t<CategoryAdd setCategories={setCategories} />\r\n\t\t\t<ol>\r\n\t\t\t\t{categories.map((category) => (\r\n\t\t\t\t\t<GifGrid category={category} key={category} />\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./components/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}